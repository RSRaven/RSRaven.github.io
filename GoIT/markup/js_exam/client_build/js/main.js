!function(){var e={};this.tmpl=function t(o,a){var r=/\W/.test(o)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+o.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):e[o]=e[o]||t(document.getElementById(o).innerHTML);return a?r(a):r}}();var mockData={images:[{imageurl:"img/ideas1.png",word:"Sport"},{imageurl:"img/ideas2.png",word:"Wellnes"},{imageurl:"img/ideas3.png",word:"Extreme Sports"},{imageurl:"img/ideas4.png",word:"Games"},{imageurl:"img/ideas5.png",word:"Culture"},{imageurl:"img/ideas6.png",word:"Relaxation"},{imageurl:"img/ideas7.png",word:"Travelling"}]};$(function(e){function t(t){e.ajax({type:"GET",dataType:"json",cache:!1,url:"http://api.pixplorer.co.uk/image?word="+t+"&amount=7&size=tb",success:function(t){"failed"===t.status&&(t=mockData);var o=e("#ideas-template").html(),a=tmpl(o,{data:t.images});e(".grid").remove(),e(".discover-ideas .wrapper").append(a),e(".grid").isotope({itemSelector:".tile--ideas",layoutMode:"masonry",masonry:{gutter:20}})},error:function(){console.log("Sorry, images API isn't working!")}})}e.support.cors=!0,e(".jcarousel").jcarousel({animation:"slow",wrap:"circular"}).jcarouselAutoscroll({interval:5e3,target:"+=1",autostart:!1}),e(".jcarousel-control-prev").on("jcarouselcontrol:active",function(){e(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){e(this).addClass("inactive")}).jcarouselControl({target:"-=1"}),e(".jcarousel-control-next").on("jcarouselcontrol:active",function(){e(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){e(this).addClass("inactive")}).jcarouselControl({target:"+=1"});e(".button--searcher").on("click",function(o){o.preventDefault();var a=e(".searcher__input");t(encodeURIComponent(a.val())),a.val("")}),t()}(jQuery));
//# sourceMappingURL=data:application/json;base64,
