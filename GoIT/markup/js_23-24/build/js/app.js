var requirejs,require,define;!function(global){function isFunction(e){return"[object Function]"===ostring.call(e)}function isArray(e){return"[object Array]"===ostring.call(e)}function each(e,t){if(e){var i;for(i=0;i<e.length&&(!e[i]||!t(e[i],i,e));i+=1);}}function eachReverse(e,t){if(e){var i;for(i=e.length-1;i>-1&&(!e[i]||!t(e[i],i,e));i-=1);}}function hasProp(e,t){return hasOwn.call(e,t)}function getOwn(e,t){return hasProp(e,t)&&e[t]}function eachProp(e,t){var i;for(i in e)if(hasProp(e,i)&&t(e[i],i))break}function mixin(e,t,i,n){return t&&eachProp(t,function(t,r){(i||!hasProp(e,r))&&(!n||"object"!=typeof t||!t||isArray(t)||isFunction(t)||t instanceof RegExp?e[r]=t:(e[r]||(e[r]={}),mixin(e[r],t,i,n)))}),e}function bind(e,t){return function(){return t.apply(e,arguments)}}function scripts(){return document.getElementsByTagName("script")}function defaultOnError(e){throw e}function getGlobal(e){if(!e)return e;var t=global;return each(e.split("."),function(e){t=t[e]}),t}function makeError(e,t,i,n){var r=new Error(t+"\nhttp://requirejs.org/docs/errors.html#"+e);return r.requireType=e,r.requireModules=n,i&&(r.originalError=i),r}function newContext(e){function t(e){var t,i;for(t=0;t<e.length;t++)if(i=e[t],"."===i)e.splice(t,1),t-=1;else if(".."===i){if(0===t||1===t&&".."===e[2]||".."===e[t-1])continue;t>0&&(e.splice(t-1,2),t-=2)}}function i(e,i,n){var r,a,o,s,u,c,d,p,l,f,h,m,g=i&&i.split("/"),v=w.map,x=v&&v["*"];if(e&&(e=e.split("/"),d=e.length-1,w.nodeIdCompat&&jsSuffixRegExp.test(e[d])&&(e[d]=e[d].replace(jsSuffixRegExp,"")),"."===e[0].charAt(0)&&g&&(m=g.slice(0,g.length-1),e=m.concat(e)),t(e),e=e.join("/")),n&&v&&(g||x)){o=e.split("/");e:for(s=o.length;s>0;s-=1){if(c=o.slice(0,s).join("/"),g)for(u=g.length;u>0;u-=1)if(a=getOwn(v,g.slice(0,u).join("/")),a&&(a=getOwn(a,c))){p=a,l=s;break e}!f&&x&&getOwn(x,c)&&(f=getOwn(x,c),h=s)}!p&&f&&(p=f,l=h),p&&(o.splice(0,l,p),e=o.join("/"))}return r=getOwn(w.pkgs,e),r?r:e}function n(e){isBrowser&&each(scripts(),function(t){return t.getAttribute("data-requiremodule")===e&&t.getAttribute("data-requirecontext")===q.contextName?(t.parentNode.removeChild(t),!0):void 0})}function r(e){var t=getOwn(w.paths,e);return t&&isArray(t)&&t.length>1?(t.shift(),q.require.undef(e),q.makeRequire(null,{skipMap:!0})([e]),!0):void 0}function a(e){var t,i=e?e.indexOf("!"):-1;return i>-1&&(t=e.substring(0,i),e=e.substring(i+1,e.length)),[t,e]}function o(e,t,n,r){var o,s,u,c,d=null,p=t?t.name:null,l=e,f=!0,h="";return e||(f=!1,e="_@r"+(D+=1)),c=a(e),d=c[0],e=c[1],d&&(d=i(d,p,r),s=getOwn(O,d)),e&&(d?h=s&&s.normalize?s.normalize(e,function(e){return i(e,p,r)}):-1===e.indexOf("!")?i(e,p,r):e:(h=i(e,p,r),c=a(h),d=c[0],h=c[1],n=!0,o=q.nameToUrl(h))),u=!d||s||n?"":"_unnormalized"+(B+=1),{prefix:d,name:h,parentMap:t,unnormalized:!!u,url:o,originalName:l,isDefine:f,id:(d?d+"!"+h:h)+u}}function s(e){var t=e.id,i=getOwn(k,t);return i||(i=k[t]=new q.Module(e)),i}function u(e,t,i){var n=e.id,r=getOwn(k,n);!hasProp(O,n)||r&&!r.defineEmitComplete?(r=s(e),r.error&&"error"===t?i(r.error):r.on(t,i)):"defined"===t&&i(O[n])}function c(e,t){var i=e.requireModules,n=!1;t?t(e):(each(i,function(t){var i=getOwn(k,t);i&&(i.error=e,i.events.error&&(n=!0,i.emit("error",e)))}),n||req.onError(e))}function d(){globalDefQueue.length&&(each(globalDefQueue,function(e){var t=e[0];"string"==typeof t&&(q.defQueueMap[t]=!0),j.push(e)}),globalDefQueue=[])}function p(e){delete k[e],delete S[e]}function l(e,t,i){var n=e.map.id;e.error?e.emit("error",e.error):(t[n]=!0,each(e.depMaps,function(n,r){var a=n.id,o=getOwn(k,a);!o||e.depMatched[r]||i[a]||(getOwn(t,a)?(e.defineDep(r,O[a]),e.check()):l(o,t,i))}),i[n]=!0)}function f(){var e,t,i=1e3*w.waitSeconds,a=i&&q.startTime+i<(new Date).getTime(),o=[],s=[],u=!1,d=!0;if(!x){if(x=!0,eachProp(S,function(e){var i=e.map,c=i.id;if(e.enabled&&(i.isDefine||s.push(e),!e.error))if(!e.inited&&a)r(c)?(t=!0,u=!0):(o.push(c),n(c));else if(!e.inited&&e.fetched&&i.isDefine&&(u=!0,!i.prefix))return d=!1}),a&&o.length)return e=makeError("timeout","Load timeout for modules: "+o,null,o),e.contextName=q.contextName,c(e);d&&each(s,function(e){l(e,{},{})}),a&&!t||!u||!isBrowser&&!isWebWorker||y||(y=setTimeout(function(){y=0,f()},50)),x=!1}}function h(e){hasProp(O,e[0])||s(o(e[0],null,!0)).init(e[1],e[2])}function m(e,t,i,n){e.detachEvent&&!isOpera?n&&e.detachEvent(n,t):e.removeEventListener(i,t,!1)}function g(e){var t=e.currentTarget||e.srcElement;return m(t,q.onScriptLoad,"load","onreadystatechange"),m(t,q.onScriptError,"error"),{node:t,id:t&&t.getAttribute("data-requiremodule")}}function v(){var e;for(d();j.length;){if(e=j.shift(),null===e[0])return c(makeError("mismatch","Mismatched anonymous define() module: "+e[e.length-1]));h(e)}q.defQueueMap={}}var x,b,q,E,y,w={waitSeconds:7,baseUrl:"./",paths:{},bundles:{},pkgs:{},shim:{},config:{}},k={},S={},M={},j=[],O={},T={},P={},D=1,B=1;return E={require:function(e){return e.require?e.require:e.require=q.makeRequire(e.map)},exports:function(e){return e.usingExports=!0,e.map.isDefine?e.exports?O[e.map.id]=e.exports:e.exports=O[e.map.id]={}:void 0},module:function(e){return e.module?e.module:e.module={id:e.map.id,uri:e.map.url,config:function(){return getOwn(w.config,e.map.id)||{}},exports:e.exports||(e.exports={})}}},b=function(e){this.events=getOwn(M,e.id)||{},this.map=e,this.shim=getOwn(w.shim,e.id),this.depExports=[],this.depMaps=[],this.depMatched=[],this.pluginMaps={},this.depCount=0},b.prototype={init:function(e,t,i,n){n=n||{},this.inited||(this.factory=t,i?this.on("error",i):this.events.error&&(i=bind(this,function(e){this.emit("error",e)})),this.depMaps=e&&e.slice(0),this.errback=i,this.inited=!0,this.ignore=n.ignore,n.enabled||this.enabled?this.enable():this.check())},defineDep:function(e,t){this.depMatched[e]||(this.depMatched[e]=!0,this.depCount-=1,this.depExports[e]=t)},fetch:function(){if(!this.fetched){this.fetched=!0,q.startTime=(new Date).getTime();var e=this.map;return this.shim?void q.makeRequire(this.map,{enableBuildCallback:!0})(this.shim.deps||[],bind(this,function(){return e.prefix?this.callPlugin():this.load()})):e.prefix?this.callPlugin():this.load()}},load:function(){var e=this.map.url;T[e]||(T[e]=!0,q.load(this.map.id,e))},check:function(){if(this.enabled&&!this.enabling){var e,t,i=this.map.id,n=this.depExports,r=this.exports,a=this.factory;if(this.inited){if(this.error)this.emit("error",this.error);else if(!this.defining){if(this.defining=!0,this.depCount<1&&!this.defined){if(isFunction(a)){try{r=q.execCb(i,a,n,r)}catch(o){e=o}if(this.map.isDefine&&void 0===r&&(t=this.module,t?r=t.exports:this.usingExports&&(r=this.exports)),e){if(this.events.error&&this.map.isDefine||req.onError!==defaultOnError)return e.requireMap=this.map,e.requireModules=this.map.isDefine?[this.map.id]:null,e.requireType=this.map.isDefine?"define":"require",c(this.error=e);"undefined"!=typeof console&&console.error?console.error(e):req.onError(e)}}else r=a;if(this.exports=r,this.map.isDefine&&!this.ignore&&(O[i]=r,req.onResourceLoad)){var s=[];each(this.depMaps,function(e){s.push(e.normalizedMap||e)}),req.onResourceLoad(q,this.map,s)}p(i),this.defined=!0}this.defining=!1,this.defined&&!this.defineEmitted&&(this.defineEmitted=!0,this.emit("defined",this.exports),this.defineEmitComplete=!0)}}else hasProp(q.defQueueMap,i)||this.fetch()}},callPlugin:function(){var e=this.map,t=e.id,n=o(e.prefix);this.depMaps.push(n),u(n,"defined",bind(this,function(n){var r,a,d,l=getOwn(P,this.map.id),f=this.map.name,h=this.map.parentMap?this.map.parentMap.name:null,m=q.makeRequire(e.parentMap,{enableBuildCallback:!0});return this.map.unnormalized?(n.normalize&&(f=n.normalize(f,function(e){return i(e,h,!0)})||""),a=o(e.prefix+"!"+f,this.map.parentMap),u(a,"defined",bind(this,function(e){this.map.normalizedMap=a,this.init([],function(){return e},null,{enabled:!0,ignore:!0})})),d=getOwn(k,a.id),void(d&&(this.depMaps.push(a),this.events.error&&d.on("error",bind(this,function(e){this.emit("error",e)})),d.enable()))):l?(this.map.url=q.nameToUrl(l),void this.load()):(r=bind(this,function(e){this.init([],function(){return e},null,{enabled:!0})}),r.error=bind(this,function(e){this.inited=!0,this.error=e,e.requireModules=[t],eachProp(k,function(e){0===e.map.id.indexOf(t+"_unnormalized")&&p(e.map.id)}),c(e)}),r.fromText=bind(this,function(i,n){var a=e.name,u=o(a),d=useInteractive;n&&(i=n),d&&(useInteractive=!1),s(u),hasProp(w.config,t)&&(w.config[a]=w.config[t]);try{req.exec(i)}catch(p){return c(makeError("fromtexteval","fromText eval for "+t+" failed: "+p,p,[t]))}d&&(useInteractive=!0),this.depMaps.push(u),q.completeLoad(a),m([a],r)}),void n.load(e.name,m,r,w))})),q.enable(n,this),this.pluginMaps[n.id]=n},enable:function(){S[this.map.id]=this,this.enabled=!0,this.enabling=!0,each(this.depMaps,bind(this,function(e,t){var i,n,r;if("string"==typeof e){if(e=o(e,this.map.isDefine?this.map:this.map.parentMap,!1,!this.skipMap),this.depMaps[t]=e,r=getOwn(E,e.id))return void(this.depExports[t]=r(this));this.depCount+=1,u(e,"defined",bind(this,function(e){this.undefed||(this.defineDep(t,e),this.check())})),this.errback?u(e,"error",bind(this,this.errback)):this.events.error&&u(e,"error",bind(this,function(e){this.emit("error",e)}))}i=e.id,n=k[i],hasProp(E,i)||!n||n.enabled||q.enable(e,this)})),eachProp(this.pluginMaps,bind(this,function(e){var t=getOwn(k,e.id);t&&!t.enabled&&q.enable(e,this)})),this.enabling=!1,this.check()},on:function(e,t){var i=this.events[e];i||(i=this.events[e]=[]),i.push(t)},emit:function(e,t){each(this.events[e],function(e){e(t)}),"error"===e&&delete this.events[e]}},q={config:w,contextName:e,registry:k,defined:O,urlFetched:T,defQueue:j,defQueueMap:{},Module:b,makeModuleMap:o,nextTick:req.nextTick,onError:c,configure:function(e){e.baseUrl&&"/"!==e.baseUrl.charAt(e.baseUrl.length-1)&&(e.baseUrl+="/");var t=w.shim,i={paths:!0,bundles:!0,config:!0,map:!0};eachProp(e,function(e,t){i[t]?(w[t]||(w[t]={}),mixin(w[t],e,!0,!0)):w[t]=e}),e.bundles&&eachProp(e.bundles,function(e,t){each(e,function(e){e!==t&&(P[e]=t)})}),e.shim&&(eachProp(e.shim,function(e,i){isArray(e)&&(e={deps:e}),!e.exports&&!e.init||e.exportsFn||(e.exportsFn=q.makeShimExports(e)),t[i]=e}),w.shim=t),e.packages&&each(e.packages,function(e){var t,i;e="string"==typeof e?{name:e}:e,i=e.name,t=e.location,t&&(w.paths[i]=e.location),w.pkgs[i]=e.name+"/"+(e.main||"main").replace(currDirRegExp,"").replace(jsSuffixRegExp,"")}),eachProp(k,function(e,t){e.inited||e.map.unnormalized||(e.map=o(t,null,!0))}),(e.deps||e.callback)&&q.require(e.deps||[],e.callback)},makeShimExports:function(e){function t(){var t;return e.init&&(t=e.init.apply(global,arguments)),t||e.exports&&getGlobal(e.exports)}return t},makeRequire:function(t,r){function a(i,n,u){var d,p,l;return r.enableBuildCallback&&n&&isFunction(n)&&(n.__requireJsBuild=!0),"string"==typeof i?isFunction(n)?c(makeError("requireargs","Invalid require call"),u):t&&hasProp(E,i)?E[i](k[t.id]):req.get?req.get(q,i,t,a):(p=o(i,t,!1,!0),d=p.id,hasProp(O,d)?O[d]:c(makeError("notloaded",'Module name "'+d+'" has not been loaded yet for context: '+e+(t?"":". Use require([])")))):(v(),q.nextTick(function(){v(),l=s(o(null,t)),l.skipMap=r.skipMap,l.init(i,n,u,{enabled:!0}),f()}),a)}return r=r||{},mixin(a,{isBrowser:isBrowser,toUrl:function(e){var n,r=e.lastIndexOf("."),a=e.split("/")[0],o="."===a||".."===a;return-1!==r&&(!o||r>1)&&(n=e.substring(r,e.length),e=e.substring(0,r)),q.nameToUrl(i(e,t&&t.id,!0),n,!0)},defined:function(e){return hasProp(O,o(e,t,!1,!0).id)},specified:function(e){return e=o(e,t,!1,!0).id,hasProp(O,e)||hasProp(k,e)}}),t||(a.undef=function(e){d();var i=o(e,t,!0),r=getOwn(k,e);r.undefed=!0,n(e),delete O[e],delete T[i.url],delete M[e],eachReverse(j,function(t,i){t[0]===e&&j.splice(i,1)}),delete q.defQueueMap[e],r&&(r.events.defined&&(M[e]=r.events),p(e))}),a},enable:function(e){var t=getOwn(k,e.id);t&&s(e).enable()},completeLoad:function(e){var t,i,n,a=getOwn(w.shim,e)||{},o=a.exports;for(d();j.length;){if(i=j.shift(),null===i[0]){if(i[0]=e,t)break;t=!0}else i[0]===e&&(t=!0);h(i)}if(q.defQueueMap={},n=getOwn(k,e),!t&&!hasProp(O,e)&&n&&!n.inited){if(!(!w.enforceDefine||o&&getGlobal(o)))return r(e)?void 0:c(makeError("nodefine","No define call for "+e,null,[e]));h([e,a.deps||[],a.exportsFn])}f()},nameToUrl:function(e,t,i){var n,r,a,o,s,u,c,d=getOwn(w.pkgs,e);if(d&&(e=d),c=getOwn(P,e))return q.nameToUrl(c,t,i);if(req.jsExtRegExp.test(e))s=e+(t||"");else{for(n=w.paths,r=e.split("/"),a=r.length;a>0;a-=1)if(o=r.slice(0,a).join("/"),u=getOwn(n,o)){isArray(u)&&(u=u[0]),r.splice(0,a,u);break}s=r.join("/"),s+=t||(/^data\:|\?/.test(s)||i?"":".js"),s=("/"===s.charAt(0)||s.match(/^[\w\+\.\-]+:/)?"":w.baseUrl)+s}return w.urlArgs?s+((-1===s.indexOf("?")?"?":"&")+w.urlArgs):s},load:function(e,t){req.load(q,e,t)},execCb:function(e,t,i,n){return t.apply(n,i)},onScriptLoad:function(e){if("load"===e.type||readyRegExp.test((e.currentTarget||e.srcElement).readyState)){interactiveScript=null;var t=g(e);q.completeLoad(t.id)}},onScriptError:function(e){var t=g(e);if(!r(t.id)){var i=[];return eachProp(k,function(e,n){0!==n.indexOf("_@r")&&each(e.depMaps,function(e){return e.id===t.id&&i.push(n),!0})}),c(makeError("scripterror",'Script error for "'+t.id+(i.length?'", needed by: '+i.join(", "):'"'),e,[t.id]))}}},q.require=q.makeRequire(),q}function getInteractiveScript(){return interactiveScript&&"interactive"===interactiveScript.readyState?interactiveScript:(eachReverse(scripts(),function(e){return"interactive"===e.readyState?interactiveScript=e:void 0}),interactiveScript)}var req,s,head,baseElement,dataMain,src,interactiveScript,currentlyAddingScript,mainScript,subPath,version="2.1.22",commentRegExp=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,cjsRequireRegExp=/[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,jsSuffixRegExp=/\.js$/,currDirRegExp=/^\.\//,op=Object.prototype,ostring=op.toString,hasOwn=op.hasOwnProperty,ap=Array.prototype,isBrowser=!("undefined"==typeof window||"undefined"==typeof navigator||!window.document),isWebWorker=!isBrowser&&"undefined"!=typeof importScripts,readyRegExp=isBrowser&&"PLAYSTATION 3"===navigator.platform?/^complete$/:/^(complete|loaded)$/,defContextName="_",isOpera="undefined"!=typeof opera&&"[object Opera]"===opera.toString(),contexts={},cfg={},globalDefQueue=[],useInteractive=!1;if("undefined"==typeof define){if("undefined"!=typeof requirejs){if(isFunction(requirejs))return;cfg=requirejs,requirejs=void 0}"undefined"==typeof require||isFunction(require)||(cfg=require,require=void 0),req=requirejs=function(e,t,i,n){var r,a,o=defContextName;return isArray(e)||"string"==typeof e||(a=e,isArray(t)?(e=t,t=i,i=n):e=[]),a&&a.context&&(o=a.context),r=getOwn(contexts,o),r||(r=contexts[o]=req.s.newContext(o)),a&&r.configure(a),r.require(e,t,i)},req.config=function(e){return req(e)},req.nextTick="undefined"!=typeof setTimeout?function(e){setTimeout(e,4)}:function(e){e()},require||(require=req),req.version=version,req.jsExtRegExp=/^\/|:|\?|\.js$/,req.isBrowser=isBrowser,s=req.s={contexts:contexts,newContext:newContext},req({}),each(["toUrl","undef","defined","specified"],function(e){req[e]=function(){var t=contexts[defContextName];return t.require[e].apply(t,arguments)}}),isBrowser&&(head=s.head=document.getElementsByTagName("head")[0],baseElement=document.getElementsByTagName("base")[0],baseElement&&(head=s.head=baseElement.parentNode)),req.onError=defaultOnError,req.createNode=function(e,t,i){var n=e.xhtml?document.createElementNS("http://www.w3.org/1999/xhtml","html:script"):document.createElement("script");return n.type=e.scriptType||"text/javascript",n.charset="utf-8",n.async=!0,n},req.load=function(e,t,i){var n,r=e&&e.config||{};if(isBrowser)return n=req.createNode(r,t,i),r.onNodeCreated&&r.onNodeCreated(n,r,t,i),n.setAttribute("data-requirecontext",e.contextName),n.setAttribute("data-requiremodule",t),!n.attachEvent||n.attachEvent.toString&&n.attachEvent.toString().indexOf("[native code")<0||isOpera?(n.addEventListener("load",e.onScriptLoad,!1),n.addEventListener("error",e.onScriptError,!1)):(useInteractive=!0,n.attachEvent("onreadystatechange",e.onScriptLoad)),n.src=i,currentlyAddingScript=n,baseElement?head.insertBefore(n,baseElement):head.appendChild(n),currentlyAddingScript=null,n;if(isWebWorker)try{importScripts(i),e.completeLoad(t)}catch(a){e.onError(makeError("importscripts","importScripts failed for "+t+" at "+i,a,[t]))}},isBrowser&&!cfg.skipDataMain&&eachReverse(scripts(),function(e){return head||(head=e.parentNode),dataMain=e.getAttribute("data-main"),dataMain?(mainScript=dataMain,cfg.baseUrl||(src=mainScript.split("/"),mainScript=src.pop(),subPath=src.length?src.join("/")+"/":"./",cfg.baseUrl=subPath),mainScript=mainScript.replace(jsSuffixRegExp,""),req.jsExtRegExp.test(mainScript)&&(mainScript=dataMain),cfg.deps=cfg.deps?cfg.deps.concat(mainScript):[mainScript],!0):void 0}),define=function(e,t,i){var n,r;"string"!=typeof e&&(i=t,t=e,e=null),isArray(t)||(i=t,t=null),!t&&isFunction(i)&&(t=[],i.length&&(i.toString().replace(commentRegExp,"").replace(cjsRequireRegExp,function(e,i){t.push(i)}),t=(1===i.length?["require"]:["require","exports","module"]).concat(t))),useInteractive&&(n=currentlyAddingScript||getInteractiveScript(),n&&(e||(e=n.getAttribute("data-requiremodule")),r=contexts[n.getAttribute("data-requirecontext")])),r?(r.defQueue.push([e,t,i]),r.defQueueMap[e]=!0):globalDefQueue.push([e,t,i])},define.amd={jQuery:!0},req.exec=function(text){return eval(text)},req(cfg)}}(this),define("../../node_modules/requirejs/require.js",function(){}),define("tmpl",[],function(){!function(){var e={};this.tmpl=function t(i,n){var r=/\W/.test(i)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+i.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):e[i]=e[i]||t(document.getElementById(i).innerHTML);return n?r(n):r}}()}),define("Model",[],function(){return function(e){var t=this,i=localStorage.getItem("data");i?t.data=JSON.parse(i):t.data=e,t.addItem=function(e){return 0!==e.length?(t.data.push(e),t.data):void 0},t.removeItem=function(e){var i=t.data.indexOf(e);if(-1!==i)return t.data.splice(i,1),t.data},t.changeItem=function(e,i){var n=t.data.indexOf(e);return t.data[n]=i,t.data},t.saveData=function(e){var t=JSON.stringify(e);localStorage.setItem("data",t)},t.resetData=function(){t.data=["This ToDo list was resetted. Try it again!"];var e=JSON.stringify(t.data);return localStorage.setItem("data",e),t.data}}}),define("View",[],function(){return function(e){var t=this;t.elements={input:$(".list__input"),addBtn:$(".list__add-button"),rmvItem:".list__remove-item",editItem:".list__edit-item",listContainer:$("#list"),resetBtn:$(".list__reset-button")},t.renderList=function(e){var i=tmpl($("#list-template").html(),{data:e});t.elements.listContainer.html(i)},t.renderList(e.data)}}),define("Controller",[],function(){return function(e,t){function i(){var i=t.elements.input.val().replace(/\n+$/m,"").replace(/\s+$/,"");e.addItem(i),e.saveData(e.data),t.renderList(e.data),t.elements.input.val("")}function n(i){var n=$(i.target).parent(".list__buttons").siblings(".list__text").text();e.removeItem(n),e.saveData(e.data),t.renderList(e.data)}function r(n){function r(n){var o=t.elements.input.val();e.changeItem(a,o),e.saveData(e.data),t.renderList(e.data),t.elements.input.val(""),t.elements.addBtn.text("Save"),t.elements.addBtn.off("click",r),t.elements.addBtn.on("click",i)}var a=n.target.closest(".list__text").childNodes[0].data;t.elements.input.val(a),t.elements.addBtn.text("Edit"),t.elements.addBtn.off("click",i),t.elements.addBtn.on("click",r)}function a(){e.resetData(),t.renderList(e.data),t.elements.input.val("")}t.elements.addBtn.on("click",i),t.elements.listContainer.on("click",t.elements.rmvItem,n),t.elements.listContainer.on("click",t.elements.editItem,r),t.elements.resetBtn.on("click",a)}}),requirejs.config({paths:{jquery:"http://code.jquery.com/jquery-1.12.0.min"},shim:{jquery:{exports:"jquery"}}}),require(["tmpl","jquery","Model","View","Controller"],function(e,t,i,n,r){t(function(){var e=["This ToDo list can save your data. Try it!"],t=new i(e),a=new n(t);new r(t,a)})}),define("app.js",function(){});
//# sourceMappingURL=require.js.build.js.map
//# sourceMappingURL=data:application/json;base64,
